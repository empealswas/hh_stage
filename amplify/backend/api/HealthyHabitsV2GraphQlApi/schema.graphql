type File @model @auth(rules: [{allow: private}]) {
    id: ID!
    key: String
    region: String
    bucket: String
    lessonID: ID @index(name: "byLesson")
}

type Section @model @auth(rules: [{allow: public, provider: iam}, {allow: public, provider: apiKey}, {allow: private}]) {
    id: ID!
    name: String
    parentID: ID @index(name: "bySection")
    organizationID: ID @index(name: "byOrganization")
    ParentSection: Section @hasOne(fields: ["parentID"])
    OrganizationOwner: Organization @belongsTo(fields: ["organizationID"])
    Lessons: [Lesson] @hasMany(indexName: "bySection", fields: ["id"])
    imagePreviewID: ID @index(name: "byFile")
    ImagePreview: File @hasOne(fields: ["imagePreviewID"])
    SectionOptions: SectionOptions @hasOne

}

type Lesson @model @auth(rules: [{allow: private}]) {
    id: ID!
    title: String
    description: String
    sectionID: ID @index(name: "bySection")
    Section: Section @belongsTo(fields: ["sectionID"])
    LessonsRecords: [PELessonRecord] @hasMany(indexName: "byLesson", fields: ["id"])
    terms: [TermLesson] @hasMany(indexName: "byLesson", fields: ["id"])
    Attendances: [Attendance] @hasMany(indexName: "byLesson", fields: ["id"])
    Files: [File] @hasMany(indexName: "byLesson", fields: ["id"])
    LessonTeacher: [LessonTeacher] @hasMany(indexName: "byLesson", fields: ["id"])
}
type SectionOptions @model @auth(rules: [{allow: private}]){
    id: ID!
    Section: Section @belongsTo
    Activities: [String],
    Durations: [Int],
    DeliveredBy: [String],
}

type PELessonRecord @model @auth(rules: [{allow: public, provider: iam}, {allow: public, provider: apiKey}, {allow: private}]) {
    id: ID!
    teacherID: ID @index(name: "byTeacher")
    Teacher: Teacher @hasOne(fields: ["teacherID"])
    Attendances: [Attendance] @hasMany(indexName: "byPELessonRecord", fields: ["id"])
    date: AWSDate
    deliveredBy: String
    duration: Int
    activity: String
    rating: Int
    notes: String
    classroomID: ID
    Classroom: Classroom @hasOne(fields: ["classroomID"])
    lessonID: ID @index(name: "byLesson")
    Lesson: Lesson @belongsTo(fields: ["lessonID"])
}

type SchoolHouse @model @auth(rules: [{allow: private}]) {
    id: ID!
    name: String
    Pupils: [Pupil] @hasMany(indexName: "bySchoolHouse", fields: ["id"])
}

type ClassroomLesson @model @auth(rules: [{allow: private}]) {
    id: ID!
    classroomID: ID @index(name: "byClassroom")
    lessonID: ID @index(name: "byLesson")
    Classroom: Classroom @hasOne(fields: ["classroomID"])
    Lesson: Lesson @hasOne(fields: ["lessonID"])
    completed: Boolean
}

type Classroom @model @auth(rules: [{allow: private}]) {
    id: ID!
    name: String
    teachers: [TeacherClassroom] @hasMany(indexName: "byClassroom", fields: ["id"])
    pupils: [PupilClassroom] @hasMany(indexName: "byClassroom", fields: ["id"])
    schoolID: ID @index(name: "bySchool")
    school: School @belongsTo(fields: ["schoolID"])
    Organization: Organization @belongsTo
    yearGroupID: ID @index(name: "byCurriculum")
    yearGroup: Curriculum @hasOne(fields: ["yearGroupID"])
}

type TeacherClassroom @model(queries: null) @auth(rules: [{allow: private}]) {
    id: ID!
    teacherID: ID! @index(name: "byTeacher", sortKeyFields: ["classroomID"])
    classroomID: ID! @index(name: "byClassroom", sortKeyFields: ["teacherID"])
    teacher: Teacher! @belongsTo(fields: ["teacherID"])
    classroom: Classroom! @belongsTo(fields: ["classroomID"])
}

type PupilClassroom @model(queries: null) @auth(rules: [{allow: private}]) {
    id: ID!
    pupilID: ID! @index(name: "byPupil", sortKeyFields: ["classroomID"])
    classroomID: ID! @index(name: "byClassroom", sortKeyFields: ["pupilID"])
    pupil: Pupil! @belongsTo(fields: ["pupilID"])
    classroom: Classroom! @belongsTo(fields: ["classroomID"])
}

type PupilOrganizationRequest @model @auth(rules: [{allow: private}]) {
    id: ID!
    pupilID: ID! @index(name: "byPupil", sortKeyFields: ["organizationID"])
    organizationID: ID! @index(name: "byOrganization", sortKeyFields: ["pupilID"])
    pupil: Pupil! @belongsTo(fields: ["pupilID"])
    organization: Organization! @belongsTo(fields: ["organizationID"])
}

type PupilOrganizationAccepted @model @auth(rules: [{allow: private}]) {
    id: ID!
    pupilID: ID! @index(name: "byPupil", sortKeyFields: ["organizationID"])
    organizationID: ID! @index(name: "byOrganization", sortKeyFields: ["pupilID"])
    pupil: Pupil! @belongsTo(fields: ["pupilID"])
    organization: Organization! @belongsTo(fields: ["organizationID"])
}

type School @model @auth(rules: [{allow: private}]) {
    id: ID!
    name: String
    country: String
    region: String
    principal: String
    Teachers: [Teacher] @hasMany(indexName: "bySchool", fields: ["id"])
    Principals: [Principal] @hasMany(indexName: "bySchool", fields: ["id"])
    Pupils: [Pupil] @hasMany(indexName: "bySchool", fields: ["id"])
    classrooms: [Classroom] @hasMany(indexName: "bySchool", fields: ["id"])
}

type Organization @model @auth(rules: [{allow: public, provider: iam}, {allow: public, provider: apiKey}, {allow: private}]) {
    id: ID!
    name: String
    Principals: [Principal] @hasMany(indexName: "byOrganization", fields: ["id"])
    WaitingForAcceptPupils: [PupilOrganizationRequest] @hasMany(indexName: "byOrganization", fields: ["id"])
    AcceptedPupils: [PupilOrganizationAccepted] @hasMany(indexName: "byOrganization", fields: ["id"])
    Sections: [Section] @hasMany(indexName: "byOrganization", fields: ["id"])
    Teachers: [Teacher] @manyToMany(relationName: "TeacherOrganziation")
    Classrooms: [Classroom] @hasMany

    type: String
}

type Attendance @model @auth(rules: [{allow: private}]) {
    id: ID!
    present: Boolean
    wasRewarded: Boolean
    pupilID: ID @index(name: "byPupil")
    lessonID: ID @index(name: "byLesson")
    Pupil: Pupil @belongsTo(fields: ["pupilID"])
    Lesson: Lesson @belongsTo(fields: ["lessonID"])
    lessonRecord: PELessonRecord @belongsTo(fields: ["lessonRecordID"])
    lessonRecordID: ID @index(name: "byPELessonRecord")
}

type LessonTeacher @model @auth(rules: [{allow: private}]) {
    id: ID!
    teacherID: ID @index(name: "byTeacher")
    lessonID: ID @index(name: "byLesson")
    Teacher: Teacher @belongsTo(fields: ["teacherID"])
    Lesson: Lesson @belongsTo(fields: ["lessonID"])
    score: Int
}

type Term @model @auth(rules: [{allow: private}]) {
    id: ID!
    nam: String
    startDate: AWSDate
    finishDate: AWSDate
    subjects: [SubjectTerm] @hasMany(indexName: "byTerm", fields: ["id"])
    TermLessons: [TermLesson] @hasMany(indexName: "byTerm", fields: ["id"])
}

type Subject @model @auth(rules: [{allow: private}]) {
    id: ID!
    name: String
    SubjectTerms: [SubjectTerm] @hasMany(indexName: "bySubject", fields: ["id"])
    curriculums: [CurriculumSubject] @hasMany(indexName: "bySubject", fields: ["id"])
}

type Curriculum @model @auth(rules: [{allow: private}]) {
    id: ID!
    name: String
    subjects: [CurriculumSubject] @hasMany(indexName: "byCurriculum", fields: ["id"])
}

type Parent @model @auth(rules: [{allow: private}]) {
    id: ID!
    firstName: String
    lastName: String
    email: AWSEmail
    children: [PupilParent] @hasMany(indexName: "byParent", fields: ["id"])
    InterventionFeedback: [ParentInterventionFeedback] @hasMany(indexName: "byParent", fields: ["id"])
}

type PupilParent @model(queries: null) @auth(rules: [{allow: private}]) {
    id: ID!
    pupilID: ID! @index(name: "byPupil", sortKeyFields: ["parentID"])
    parentID: ID! @index(name: "byParent", sortKeyFields: ["pupilID"])
    Parent: Parent! @belongsTo(fields: ["parentID"])
    Pupil: Pupil! @belongsTo(fields: ["pupilID"])
}

type Principal @model @auth(rules: [{allow: private}]) {
    id: ID!
    firstName: String
    lastName: String
    email: AWSEmail
    schoolID: ID @index(name: "bySchool")
    School: School @belongsTo(fields: ["schoolID"])
    organizationID: ID @index(name: "byOrganization")
    Organization: Organization @belongsTo(fields: ["organizationID"])
}

type Teacher @model @auth(rules: [{allow: public, provider: iam}, {allow: public, provider: apiKey}, {allow: private}]) {
    id: ID!
    firstName: String
    lastName: String
    email: AWSEmail
    schoolID: ID @index(name: "bySchool")
    classrooms: [TeacherClassroom] @hasMany(indexName: "byTeacher", fields: ["id"])
    LessonTeacher: [LessonTeacher] @hasMany(indexName: "byTeacher", fields: ["id"])
    Organizations: [Organization] @manyToMany(relationName: "TeacherOrganziation")
    School: School @belongsTo(fields: ["schoolID"])
}

type Pupil @model @auth(rules: [{allow: public, provider: iam}, {allow: public, provider: apiKey}, {allow: private}]) {
    id: ID!
    firstName: String
    lastName: String
    terraId: String
    provider: String
    Attendances: [Attendance] @hasMany(indexName: "byPupil", fields: ["id"])
    classrooms: [PupilClassroom] @hasMany(indexName: "byPupil", fields: ["id"])
    Organizations: [PupilOrganizationAccepted] @hasMany(indexName: "byPupil", fields: ["id"])
    OrganizationsRequests: [PupilOrganizationRequest] @hasMany(indexName: "byPupil", fields: ["id"])
    schoolID: ID @index(name: "bySchool")
    schoolHouseID: ID @index(name: "bySchoolHouse")
    schoolHouse: SchoolHouse @belongsTo(fields: ["schoolHouseID"])
    school: School @belongsTo(fields: ["schoolID"])
    parents: [PupilParent] @hasMany(indexName: "byPupil", fields: ["id"])
    Interventions: [Intervention] @hasMany(indexName: "byPupil", fields: ["id"])
}

type Intervention @model @auth(rules: [{allow: public, provider: iam}, {allow: public, provider: apiKey}, {allow: private}]) {
    id: ID!
    pupilID: ID! @index(name: "byPupil",  sortKeyFields: ["createdAt"], queryField: "interventionByPupilByDate")
    Pupil: Pupil @belongsTo(fields: ["pupilID"])
    message: String
    viewed: Boolean
    InterventionFeedback: [ParentInterventionFeedback] @hasMany(indexName: "byIntervention", fields: ["id"])
    createdAt: AWSDateTime! @index(name: "byDate")
}

type ParentInterventionFeedback @model @auth(rules: [{allow: public, provider: iam}, {allow: public, provider: apiKey}, {allow: private}]) {
    id: ID!
    parentID: ID! @index(name: "byParent", sortKeyFields: ["interventionID"])
    interventionID: ID! @index(name: "byIntervention", sortKeyFields: ["parentID"])
    Parent: Parent! @belongsTo(fields: ["parentID"])
    Intervention: Intervention! @belongsTo(fields: ["interventionID"])
    comment: String
    rating: Int
}

type SubjectTerm @model(queries: null) @auth(rules: [{allow: private}]) {
    id: ID!
    subjectID: ID! @index(name: "bySubject", sortKeyFields: ["termID"])
    termID: ID! @index(name: "byTerm", sortKeyFields: ["subjectID"])
    subject: Subject! @belongsTo(fields: ["subjectID"])
    term: Term! @belongsTo(fields: ["termID"])
}

type TermLesson @model(queries: null) @auth(rules: [{allow: private}]) {
    id: ID!
    termID: ID! @index(name: "byTerm", sortKeyFields: ["lessonID"])
    lessonID: ID! @index(name: "byLesson", sortKeyFields: ["termID"])
    term: Term! @belongsTo(fields: ["termID"])
    lesson: Lesson! @belongsTo(fields: ["lessonID"])
}

type CurriculumSubject @model(queries: null) @auth(rules: [{allow: private}]) {
    id: ID!
    curriculumID: ID! @index(name: "byCurriculum", sortKeyFields: ["subjectID"])
    subjectID: ID! @index(name: "bySubject", sortKeyFields: ["curriculumID"])
    curriculum: Curriculum! @belongsTo(fields: ["curriculumID"])
    subject: Subject! @belongsTo(fields: ["subjectID"])
}
